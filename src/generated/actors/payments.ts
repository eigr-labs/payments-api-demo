// @generated by protobuf-ts 2.9.4 with parameter force_client_none,force_server_none
// @generated from protobuf file "actors/payments.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Noop
 */
export interface Noop {
}
/**
 * @generated from protobuf message PaymentState
 */
export interface PaymentState {
    /**
     * @generated from protobuf field: map<string, PaymentBreakdown> payments = 1;
     */
    payments: {
        [key: string]: PaymentBreakdown;
    };
}
/**
 * @generated from protobuf message PaymentBreakdown
 */
export interface PaymentBreakdown {
    /**
     * @generated from protobuf field: string order_refid = 1;
     */
    orderRefid: string;
    /**
     * @generated from protobuf field: int32 paid_amount = 2;
     */
    paidAmount: number;
    /**
     * @generated from protobuf field: repeated TransactionState transactions = 3;
     */
    transactions: TransactionState[];
}
/**
 * @generated from protobuf message TransactionState
 */
export interface TransactionState {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string order_refid = 2;
     */
    orderRefid: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string currency = 4;
     */
    currency: string;
    /**
     * @generated from protobuf field: string status = 5;
     */
    status: string;
    /**
     * @generated from protobuf field: string external_refid = 6;
     */
    externalRefid: string;
    /**
     * @generated from protobuf field: TransactionType type = 7;
     */
    type: TransactionType;
}
/**
 * @generated from protobuf message CapturePayload
 */
export interface CapturePayload {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string order_refid = 2;
     */
    orderRefid: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string currency = 4;
     */
    currency: string;
}
/**
 * @generated from protobuf message RefundPayload
 */
export interface RefundPayload {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string capture_transaction_id = 2;
     */
    captureTransactionId: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
    /**
     * @generated from protobuf field: string currency = 4;
     */
    currency: string;
}
/**
 * @generated from protobuf message TransactionResponse
 */
export interface TransactionResponse {
    /**
     * @generated from protobuf field: string transaction_id = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
    /**
     * @generated from protobuf field: string external_refid = 3;
     */
    externalRefid: string;
    /**
     * @generated from protobuf field: string receipt_url = 4;
     */
    receiptUrl: string;
}
/**
 * @generated from protobuf message CreatePaymentPayload
 */
export interface CreatePaymentPayload {
    /**
     * @generated from protobuf field: string order_refid = 1;
     */
    orderRefid: string;
    /**
     * @generated from protobuf field: string currency = 2;
     */
    currency: string;
    /**
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
}
/**
 * @generated from protobuf message CreatePaymentResponse
 */
export interface CreatePaymentResponse {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf enum TransactionType
 */
export enum TransactionType {
    /**
     * @generated from protobuf enum value: TRANSACTION_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: TRANSACTION_TYPE_CAPTURE = 1;
     */
    CAPTURE = 1,
    /**
     * @generated from protobuf enum value: TRANSACTION_TYPE_REFUND = 2;
     */
    REFUND = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Noop$Type extends MessageType<Noop> {
    constructor() {
        super("Noop", []);
    }
    create(value?: PartialMessage<Noop>): Noop {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Noop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Noop): Noop {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Noop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Noop
 */
export const Noop = new Noop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaymentState$Type extends MessageType<PaymentState> {
    constructor() {
        super("PaymentState", [
            { no: 1, name: "payments", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PaymentBreakdown } }
        ]);
    }
    create(value?: PartialMessage<PaymentState>): PaymentState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payments = {};
        if (value !== undefined)
            reflectionMergePartial<PaymentState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaymentState): PaymentState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, PaymentBreakdown> payments */ 1:
                    this.binaryReadMap1(message.payments, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: PaymentState["payments"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PaymentState["payments"] | undefined, val: PaymentState["payments"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PaymentBreakdown.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PaymentState.payments");
            }
        }
        map[key ?? ""] = val ?? PaymentBreakdown.create();
    }
    internalBinaryWrite(message: PaymentState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, PaymentBreakdown> payments = 1; */
        for (let k of globalThis.Object.keys(message.payments)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PaymentBreakdown.internalBinaryWrite(message.payments[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PaymentState
 */
export const PaymentState = new PaymentState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaymentBreakdown$Type extends MessageType<PaymentBreakdown> {
    constructor() {
        super("PaymentBreakdown", [
            { no: 1, name: "order_refid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "paid_amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransactionState }
        ]);
    }
    create(value?: PartialMessage<PaymentBreakdown>): PaymentBreakdown {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderRefid = "";
        message.paidAmount = 0;
        message.transactions = [];
        if (value !== undefined)
            reflectionMergePartial<PaymentBreakdown>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaymentBreakdown): PaymentBreakdown {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_refid */ 1:
                    message.orderRefid = reader.string();
                    break;
                case /* int32 paid_amount */ 2:
                    message.paidAmount = reader.int32();
                    break;
                case /* repeated TransactionState transactions */ 3:
                    message.transactions.push(TransactionState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaymentBreakdown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_refid = 1; */
        if (message.orderRefid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderRefid);
        /* int32 paid_amount = 2; */
        if (message.paidAmount !== 0)
            writer.tag(2, WireType.Varint).int32(message.paidAmount);
        /* repeated TransactionState transactions = 3; */
        for (let i = 0; i < message.transactions.length; i++)
            TransactionState.internalBinaryWrite(message.transactions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PaymentBreakdown
 */
export const PaymentBreakdown = new PaymentBreakdown$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionState$Type extends MessageType<TransactionState> {
    constructor() {
        super("TransactionState", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "order_refid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "external_refid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "type", kind: "enum", T: () => ["TransactionType", TransactionType, "TRANSACTION_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<TransactionState>): TransactionState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.orderRefid = "";
        message.amount = 0;
        message.currency = "";
        message.status = "";
        message.externalRefid = "";
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<TransactionState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionState): TransactionState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string order_refid */ 2:
                    message.orderRefid = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                case /* string currency */ 4:
                    message.currency = reader.string();
                    break;
                case /* string status */ 5:
                    message.status = reader.string();
                    break;
                case /* string external_refid */ 6:
                    message.externalRefid = reader.string();
                    break;
                case /* TransactionType type */ 7:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransactionState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string order_refid = 2; */
        if (message.orderRefid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.orderRefid);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        /* string currency = 4; */
        if (message.currency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.currency);
        /* string status = 5; */
        if (message.status !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.status);
        /* string external_refid = 6; */
        if (message.externalRefid !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.externalRefid);
        /* TransactionType type = 7; */
        if (message.type !== 0)
            writer.tag(7, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TransactionState
 */
export const TransactionState = new TransactionState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CapturePayload$Type extends MessageType<CapturePayload> {
    constructor() {
        super("CapturePayload", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "eigr.functions.protocol.actors.actor_id": true } },
            { no: 2, name: "order_refid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CapturePayload>): CapturePayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.orderRefid = "";
        message.amount = 0;
        message.currency = "";
        if (value !== undefined)
            reflectionMergePartial<CapturePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CapturePayload): CapturePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string order_refid */ 2:
                    message.orderRefid = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                case /* string currency */ 4:
                    message.currency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CapturePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string order_refid = 2; */
        if (message.orderRefid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.orderRefid);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        /* string currency = 4; */
        if (message.currency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CapturePayload
 */
export const CapturePayload = new CapturePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefundPayload$Type extends MessageType<RefundPayload> {
    constructor() {
        super("RefundPayload", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "eigr.functions.protocol.actors.actor_id": true } },
            { no: 2, name: "capture_transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RefundPayload>): RefundPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.captureTransactionId = "";
        message.amount = 0;
        message.currency = "";
        if (value !== undefined)
            reflectionMergePartial<RefundPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefundPayload): RefundPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string capture_transaction_id */ 2:
                    message.captureTransactionId = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                case /* string currency */ 4:
                    message.currency = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefundPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string capture_transaction_id = 2; */
        if (message.captureTransactionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.captureTransactionId);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        /* string currency = 4; */
        if (message.currency !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.currency);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RefundPayload
 */
export const RefundPayload = new RefundPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionResponse$Type extends MessageType<TransactionResponse> {
    constructor() {
        super("TransactionResponse", [
            { no: 1, name: "transaction_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "external_refid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "receipt_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransactionResponse>): TransactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactionId = "";
        message.status = "";
        message.externalRefid = "";
        message.receiptUrl = "";
        if (value !== undefined)
            reflectionMergePartial<TransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionResponse): TransactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transaction_id */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* string external_refid */ 3:
                    message.externalRefid = reader.string();
                    break;
                case /* string receipt_url */ 4:
                    message.receiptUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transaction_id = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* string external_refid = 3; */
        if (message.externalRefid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.externalRefid);
        /* string receipt_url = 4; */
        if (message.receiptUrl !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.receiptUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TransactionResponse
 */
export const TransactionResponse = new TransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePaymentPayload$Type extends MessageType<CreatePaymentPayload> {
    constructor() {
        super("CreatePaymentPayload", [
            { no: 1, name: "order_refid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "currency", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePaymentPayload>): CreatePaymentPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.orderRefid = "";
        message.currency = "";
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<CreatePaymentPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePaymentPayload): CreatePaymentPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_refid */ 1:
                    message.orderRefid = reader.string();
                    break;
                case /* string currency */ 2:
                    message.currency = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePaymentPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_refid = 1; */
        if (message.orderRefid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderRefid);
        /* string currency = 2; */
        if (message.currency !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.currency);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePaymentPayload
 */
export const CreatePaymentPayload = new CreatePaymentPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePaymentResponse$Type extends MessageType<CreatePaymentResponse> {
    constructor() {
        super("CreatePaymentResponse", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePaymentResponse>): CreatePaymentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePaymentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePaymentResponse): CreatePaymentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePaymentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreatePaymentResponse
 */
export const CreatePaymentResponse = new CreatePaymentResponse$Type();
/**
 * @generated ServiceType for protobuf service TransactionActor
 */
export const TransactionActor = new ServiceType("TransactionActor", [
    { name: "Capture", options: { "google.api.http": { post: "/payments/capture", body: "*" } }, I: CapturePayload, O: TransactionResponse },
    { name: "Refund", options: { "google.api.http": { post: "/payments/refund", body: "*" } }, I: RefundPayload, O: TransactionResponse }
]);
/**
 * @generated ServiceType for protobuf service PaymentActor
 */
export const PaymentActor = new ServiceType("PaymentActor", [
    { name: "GetState", options: { "google.api.http": { get: "/payments/breakdown" } }, I: Noop, O: PaymentState }
]);
