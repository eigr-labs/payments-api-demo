// @generated by protobuf-ts 2.9.4 with parameter force_client_none,force_server_none
// @generated from protobuf file "actors/hello.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message HelloWorldActorState
 */
export interface HelloWorldActorState {
    /**
     * @generated from protobuf field: int32 times = 1;
     */
    times: number;
    /**
     * @generated from protobuf field: string last_message = 2;
     */
    lastMessage: string;
}
/**
 * @generated from protobuf message SayHelloRequest
 */
export interface SayHelloRequest {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message SayHelloResponse
 */
export interface SayHelloResponse {
    /**
     * @generated from protobuf field: string response = 1;
     */
    response: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloWorldActorState$Type extends MessageType<HelloWorldActorState> {
    constructor() {
        super("HelloWorldActorState", [
            { no: 1, name: "times", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "last_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloWorldActorState>): HelloWorldActorState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.times = 0;
        message.lastMessage = "";
        if (value !== undefined)
            reflectionMergePartial<HelloWorldActorState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloWorldActorState): HelloWorldActorState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 times */ 1:
                    message.times = reader.int32();
                    break;
                case /* string last_message */ 2:
                    message.lastMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloWorldActorState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 times = 1; */
        if (message.times !== 0)
            writer.tag(1, WireType.Varint).int32(message.times);
        /* string last_message = 2; */
        if (message.lastMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.lastMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloWorldActorState
 */
export const HelloWorldActorState = new HelloWorldActorState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SayHelloRequest$Type extends MessageType<SayHelloRequest> {
    constructor() {
        super("SayHelloRequest", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SayHelloRequest>): SayHelloRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SayHelloRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SayHelloRequest): SayHelloRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SayHelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SayHelloRequest
 */
export const SayHelloRequest = new SayHelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SayHelloResponse$Type extends MessageType<SayHelloResponse> {
    constructor() {
        super("SayHelloResponse", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SayHelloResponse>): SayHelloResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        if (value !== undefined)
            reflectionMergePartial<SayHelloResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SayHelloResponse): SayHelloResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SayHelloResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SayHelloResponse
 */
export const SayHelloResponse = new SayHelloResponse$Type();
/**
 * @generated ServiceType for protobuf service HelloWorldActor
 */
export const HelloWorldActor = new ServiceType("HelloWorldActor", [
    { name: "SayHello", options: { "google.api.http": { get: "/v1/hello_world" } }, I: SayHelloRequest, O: SayHelloResponse }
]);
